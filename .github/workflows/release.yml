name: Release Chrome Extension

on:
  push:
    tags:
      - 'v*.*.*'

# Add permissions for GitHub release creation
permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # @Reference: https://zenn.dev/link/comments/ab5ad0d93dac67
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Security audit
        run: pnpm audit

      - name: Clean dist directory
        run: rm -rf dist

      - name: Code quality checks
        run: |
          pnpm run prettier-check
          pnpm run eslint-check
          pnpm run type-check

      - name: Build extension
        run: pnpm run build

      - name: Package extension
        run: |
          # Check if dist/prod directory exists
          if [ ! -d "dist/prod" ]; then
            echo "::error::dist/prod directory not found. Please run build first."
            exit 1
          fi

          # Remove existing zip file
          rm -f tag-extension-manager-*.zip

          # Create ZIP file
          cd dist/prod
          zip -r "../../tag-extension-manager-${{ env.VERSION }}.zip" .
          cd ../..

          echo "Successfully created tag-extension-manager-${{ env.VERSION }}.zip"

          # Verify the file was created
          ls -la tag-extension-manager-*.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: tag-extension-manager-*.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: tag-extension-manager-*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Chrome Web Store configuration
        run: |
          echo "üîç Checking Chrome Web Store configuration..."

          # Check if Client ID is set
          if [ -n "${{ secrets.CLIENT_ID }}" ]; then
            echo "‚úÖ Client ID: ${{ secrets.CLIENT_ID }}"
          else
            echo "‚ùå Client ID: Not set"
          fi

          # Check if Client Secret is set
          if [ -n "${{ secrets.CLIENT_SECRET }}" ]; then
            echo "‚úÖ Client Secret: ${{ secrets.CLIENT_SECRET }}"
          else
            echo "‚ùå Client Secret: Not set"
          fi

          # Check if Refresh Token is set
          if [ -n "${{ secrets.REFRESH_TOKEN }}" ]; then
            echo "‚úÖ Refresh Token: ${{ secrets.REFRESH_TOKEN }}"
          else
            echo "‚ùå Refresh Token: Not set"
          fi

          echo "Zip file: tag-extension-manager-${{ env.VERSION }}.zip"

          # Check if zip file exists
          if [ -f "tag-extension-manager-${{ env.VERSION }}.zip" ]; then
            echo "‚úÖ Zip file exists"
            ls -la tag-extension-manager-${{ env.VERSION }}.zip
          else
            echo "‚ùå Zip file not found"
            exit 1
          fi

      # @Reference: https://github.com/MobileFirstLLC/cws-publish
      # @Reference: https://github.com/fregante/chrome-webstore-upload
      # @Reference: https://github.com/fregante/chrome-webstore-upload-keys
      - name: Test Chrome Web Store API connection
        run: |
          echo "üß™ Testing Chrome Web Store API connection..."

          # Test API connection using curl
          if [ -n "${{ secrets.CLIENT_ID }}" ] && [ -n "${{ secrets.CLIENT_SECRET }}" ] && [ -n "${{ secrets.REFRESH_TOKEN }}" ]; then
            echo "‚úÖ All required secrets are set"

            # Note: This is a basic test - actual API calls require proper OAuth2 flow
            echo "üìù Note: Full API testing requires OAuth2 authentication flow"
            echo "   Please verify your credentials in Chrome Web Store Developer Dashboard"
          else
            echo "‚ùå Missing required secrets"
            echo "   Please check CLIENT_ID, CLIENT_SECRET, and REFRESH_TOKEN"
            exit 1
          fi

      - name: Upload to Chrome Web Store
        uses: mobilefirstllc/cws-publish@latest
        continue-on-error: true
        with:
          action: 'publish' # one of: upload, publish, testers
          client_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          refresh_token: ${{ secrets.REFRESH_TOKEN }}
          extension_id: mcnibmkpimlpgnlgkkhpgabkhdgngmca
          zip_file: tag-extension-manager-${{ env.VERSION }}.zip

      - name: Check Chrome Web Store upload result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Chrome Web Store upload completed successfully"
          else
            echo "‚ö†Ô∏è Chrome Web Store upload failed, but workflow continued"
            echo "Please check the following:"
            echo "1. CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN are correctly set"
            echo "2. EXTENSION_ID matches your Chrome Web Store extension"
            echo "3. Extension is in the correct state for publishing"
            echo "4. API permissions are properly configured"
          fi
