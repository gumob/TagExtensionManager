name: Release Chrome Extension

on:
  push:
    tags:
      - 'v*.*.*'

# Add permissions for GitHub release creation
permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # @Reference: https://zenn.dev/link/comments/ab5ad0d93dac67
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Security audit
        run: pnpm audit

      - name: Clean dist directory
        run: rm -rf dist

      - name: Code quality checks
        run: |
          pnpm run prettier-check
          pnpm run eslint-check
          pnpm run type-check

      - name: Build extension
        run: pnpm run build

      - name: Package extension
        run: |
          # Check if dist/prod directory exists
          if [ ! -d "dist/prod" ]; then
            echo "::error::dist/prod directory not found. Please run build first."
            exit 1
          fi

          # Remove existing zip file
          rm -f tag-extension-manager-*.zip

          # Create ZIP file
          cd dist/prod
          zip -r "../../tag-extension-manager-${{ env.VERSION }}.zip" .
          cd ../..

          echo "Successfully created tag-extension-manager-${{ env.VERSION }}.zip"

          # Verify the file was created
          ls -la tag-extension-manager-*.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: tag-extension-manager-*.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: tag-extension-manager-*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Chrome Web Store configuration
        run: |
          echo "🔍 Checking Chrome Web Store configuration..."

          # Check if Client ID is set
          if [ -n "${{ secrets.CHROME_CLIENT_ID }}" ]; then
            echo "✅ Client ID: ${{ secrets.CHROME_CLIENT_ID }}"
          else
            echo "❌ Client ID: Not set"
          fi

          # Check if Client Secret is set
          if [ -n "${{ secrets.CHROME_CLIENT_SECRET }}" ]; then
            echo "✅ Client Secret: ${{ secrets.CHROME_CLIENT_SECRET }}"
          else
            echo "❌ Client Secret: Not set"
          fi

          # Check if Refresh Token is set
          if [ -n "${{ secrets.CHROME_REFRESH_TOKEN }}" ]; then
            echo "✅ Refresh Token: ${{ secrets.CHROME_REFRESH_TOKEN }}"
          else
            echo "❌ Refresh Token: Not set"
          fi

          echo "Zip file: tag-extension-manager-${{ env.VERSION }}.zip"

          # Check if zip file exists
          if [ -f "tag-extension-manager-${{ env.VERSION }}.zip" ]; then
            echo "✅ Zip file exists"
            ls -la tag-extension-manager-${{ env.VERSION }}.zip
          else
            echo "❌ Zip file not found"
            exit 1
          fi

      # @Reference: https://github.com/MobileFirstLLC/cws-publish
      # @Reference: https://github.com/fregante/chrome-webstore-upload
      # @Reference: https://github.com/fregante/chrome-webstore-upload-keys
      - name: Test Chrome Web Store API connection
        run: |
          echo "🧪 Testing Chrome Web Store API connection..."

          # Test API connection using curl
          if [ -n "${{ secrets.CHROME_CLIENT_ID }}" ] && [ -n "${{ secrets.CHROME_CLIENT_SECRET }}" ] && [ -n "${{ secrets.CHROME_REFRESH_TOKEN }}" ]; then
            echo "✅ All required secrets are set"

            # Note: This is a basic test - actual API calls require proper OAuth2 flow
            echo "📝 Note: Full API testing requires OAuth2 authentication flow"
            echo "   Please verify your credentials in Chrome Web Store Developer Dashboard"
          else
            echo "❌ Missing required secrets"
            echo "   Please check CHROME_CLIENT_ID, CHROME_CLIENT_SECRET, and CHROME_REFRESH_TOKEN"
            exit 1
          fi

      - name: Validate OAuth2 credentials
        run: |
          echo "🔐 Validating OAuth2 credentials..."

          # Test OAuth2 token refresh
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CHROME_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CHROME_CLIENT_SECRET }}" \
            -d "refresh_token=${{ secrets.CHROME_REFRESH_TOKEN }}" \
            -d "grant_type=refresh_token" \
            "https://oauth2.googleapis.com/token")

          echo "OAuth2 Response: $RESPONSE"

          # Check if response contains access_token
          if echo "$RESPONSE" | grep -q "access_token"; then
            echo "✅ OAuth2 credentials are valid"
          else
            echo "❌ OAuth2 credentials are invalid"
            echo "   Please check your credentials in Google Cloud Console"
            echo "   Response: $RESPONSE"
            exit 1
          fi

      - name: Upload to Chrome Web Store
        run: |
          echo "📤 Uploading to Chrome Web Store..."
          echo "Extension ID: ${{ secrets.CHROME_EXTENSION_ID }}"
          echo "Source file: tag-extension-manager-${{ env.VERSION }}.zip"

          # Upload with detailed error handling
          npx chrome-webstore-upload-cli@2 upload --auto-publish --source tag-extension-manager-${{ env.VERSION }}.zip
        env:
          CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
          EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        continue-on-error: true

      - name: Check Chrome Web Store upload result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Chrome Web Store upload completed successfully"
          else
            echo "⚠️ Chrome Web Store upload failed, but workflow continued"
            echo ""
            echo "🔍 Troubleshooting Guide:"
            echo "1. Verify OAuth2 credentials in Google Cloud Console:"
            echo "   - Go to https://console.cloud.google.com/"
            echo "   - Navigate to APIs & Services > Credentials"
            echo "   - Check if OAuth2 client is properly configured"
            echo ""
            echo "2. Verify Chrome Web Store API is enabled:"
            echo "   - Go to https://console.cloud.google.com/"
            echo "   - Navigate to APIs & Services > Library"
            echo "   - Search for 'Chrome Web Store API' and enable it"
            echo ""
            echo "3. Check Extension ID:"
            echo "   - Current ID: mcnibmkpimlpgnlpgnlgkkhpgabkhdgngmca"
            echo "   - Verify this matches your Chrome Web Store extension"
            echo ""
            echo "4. Verify Chrome Web Store Developer Account:"
            echo "   - Go to https://chrome.google.com/webstore/devconsole/"
            echo "   - Ensure account is properly set up and verified"
            echo ""
            echo "5. Check API permissions:"
            echo "   - Ensure your OAuth2 client has the following scopes:"
            echo "     * https://www.googleapis.com/auth/chromewebstore"
            echo ""
            echo "6. Verify refresh token:"
            echo "   - Refresh tokens can expire"
            echo "   - Generate a new one if necessary"
          fi
