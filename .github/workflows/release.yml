name: Release Chrome Extension

on:
  push:
    tags:
      - 'v*.*.*'

# Add permissions for GitHub release creation
permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      # @Reference: https://zenn.dev/link/comments/ab5ad0d93dac67
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Security audit
        run: pnpm audit

      - name: Clean dist directory
        run: rm -rf dist

      - name: Code quality checks
        run: |
          pnpm run prettier-check
          pnpm run eslint-check
          pnpm run type-check

      - name: Build extension
        run: pnpm run build

      - name: Package extension
        run: |
          # Check if dist/prod directory exists
          if [ ! -d "dist/prod" ]; then
            echo "::error::dist/prod directory not found. Please run build first."
            exit 1
          fi

          # Remove existing zip file
          rm -f tag-extension-manager-*.zip

          # Create ZIP file
          cd dist/prod
          zip -r "../../tag-extension-manager-${{ env.VERSION }}.zip" .
          cd ../..

          echo "Successfully created tag-extension-manager-${{ env.VERSION }}.zip"

          # Verify the file was created
          ls -la tag-extension-manager-*.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: tag-extension-manager-*.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: tag-extension-manager-*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Chrome Web Store configuration
        run: |
          echo "üîç Checking Chrome Web Store configuration..."

          # Check if Client ID is set
          if [ -n "${{ secrets.CHROME_CLIENT_ID }}" ]; then
            echo "‚úÖ Client ID: ***"
          else
            echo "‚ùå Client ID: Not set"
          fi

          # Check if Client Secret is set
          if [ -n "${{ secrets.CHROME_CLIENT_SECRET }}" ]; then
            echo "‚úÖ Client Secret: ***"
          else
            echo "‚ùå Client Secret: Not set"
          fi

          # Check if Refresh Token is set
          if [ -n "${{ secrets.CHROME_REFRESH_TOKEN }}" ]; then
            echo "‚úÖ Refresh Token: ***"
          else
            echo "‚ùå Refresh Token: Not set"
          fi

          # Check if Extension ID is set
          if [ -n "${{ secrets.CHROME_EXTENSION_ID }}" ]; then
            echo "‚úÖ Extension ID: ***"
          else
            echo "‚ùå Extension ID: Not set"
          fi

          echo "Zip file: tag-extension-manager-${{ env.VERSION }}.zip"

          # Check if zip file exists
          if [ -f "tag-extension-manager-${{ env.VERSION }}.zip" ]; then
            echo "‚úÖ Zip file exists"
            ls -la tag-extension-manager-${{ env.VERSION }}.zip
          else
            echo "‚ùå Zip file not found"
            exit 1
          fi

      # @Reference: https://github.com/MobileFirstLLC/cws-publish
      # @Reference: https://github.com/fregante/chrome-webstore-upload
      # @Reference: https://github.com/fregante/chrome-webstore-upload-keys
      - name: Test Chrome Web Store API connection
        run: |
          echo "üß™ Testing Chrome Web Store API connection..."

          # Safely check if all required secrets are set
          CLIENT_ID="${{ secrets.CHROME_CLIENT_ID }}"
          CLIENT_SECRET="${{ secrets.CHROME_CLIENT_SECRET }}"
          REFRESH_TOKEN="${{ secrets.CHROME_REFRESH_TOKEN }}"
          EXTENSION_ID="${{ secrets.CHROME_EXTENSION_ID }}"

          # Test API connection using curl
          if [ -n "$CLIENT_ID" ] && [ -n "$CLIENT_SECRET" ] && [ -n "$REFRESH_TOKEN" ] && [ -n "$EXTENSION_ID" ]; then
            echo "‚úÖ All required secrets are set"
            echo "  - Client ID length: ${#CLIENT_ID}"
            echo "  - Client Secret length: ${#CLIENT_SECRET}"
            echo "  - Refresh Token length: ${#REFRESH_TOKEN}"
            echo "  - Extension ID length: ${#EXTENSION_ID}"

            # Note: This is a basic test - actual API calls require proper OAuth2 flow
            echo "üìù Note: Full API testing requires OAuth2 authentication flow"
            echo "   Please verify your credentials in Chrome Web Store Developer Dashboard"
          else
            echo "‚ùå Missing required secrets"
            echo "  - Client ID: $([ -n "$CLIENT_ID" ] && echo "Set" || echo "Not set")"
            echo "  - Client Secret: $([ -n "$CLIENT_SECRET" ] && echo "Set" || echo "Not set")"
            echo "  - Refresh Token: $([ -n "$REFRESH_TOKEN" ] && echo "Set" || echo "Not set")"
            echo "  - Extension ID: $([ -n "$EXTENSION_ID" ] && echo "Set" || echo "Not set")"
            echo "   Please check CHROME_CLIENT_ID, CHROME_CLIENT_SECRET, CHROME_REFRESH_TOKEN, and CHROME_EXTENSION_ID"
            exit 1
          fi

      - name: Validate OAuth2 credentials
        run: |
          echo "üîê Validating OAuth2 credentials..."

          # Test OAuth2 token refresh
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CHROME_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CHROME_CLIENT_SECRET }}" \
            -d "refresh_token=${{ secrets.CHROME_REFRESH_TOKEN }}" \
            -d "grant_type=refresh_token" \
            "https://oauth2.googleapis.com/token")

          echo "OAuth2 Response: $RESPONSE"

          # Check if response contains access_token
          if echo "$RESPONSE" | grep -q "access_token"; then
            echo "‚úÖ OAuth2 credentials are valid"

            # Extract and validate access token using jq for proper JSON parsing
            ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token // empty')
            TOKEN_TYPE=$(echo "$RESPONSE" | jq -r '.token_type // empty')
            EXPIRES_IN=$(echo "$RESPONSE" | jq -r '.expires_in // empty')

            echo "  - Token Type: $TOKEN_TYPE"
            echo "  - Expires In: $EXPIRES_IN seconds"
            echo "  - Token Length: ${#ACCESS_TOKEN} characters"

            # Validate that access token was extracted successfully
            if [ -z "$ACCESS_TOKEN" ]; then
              echo "‚ùå Failed to extract access token from response"
              echo "   Response: $RESPONSE"
              exit 1
            fi

            # Test Chrome Web Store API access with the token
            echo "üß™ Testing Chrome Web Store API access..."
            API_RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://www.googleapis.com/chromewebstore/v1.1/items/$EXTENSION_ID?projection=DRAFT")

            if echo "$API_RESPONSE" | grep -q "error"; then
              echo "‚ùå Chrome Web Store API access failed"
              echo "  Response: $API_RESPONSE"
              echo ""
              echo "üîç This indicates one of the following issues:"
              echo "  1. Extension ID mismatch"
              echo "  2. Chrome Web Store API not enabled"
              echo "  3. Insufficient OAuth2 scopes"
              echo "  4. Account permissions issue"
              echo "  5. Missing required API parameters (projection)"
              echo ""
              echo "üìã Required OAuth2 Scopes:"
              echo "   - https://www.googleapis.com/auth/chromewebstore"
              echo ""
              echo "üîß Next Steps:"
              echo "   1. Verify extension ID in Chrome Web Store Developer Console"
              echo "   2. Enable Chrome Web Store API in Google Cloud Console"
              echo "   3. Check OAuth2 client scopes"
              echo "   4. Verify developer account permissions"
              echo "   5. Ensure API request includes required parameters"
              exit 1
            else
              echo "‚úÖ Chrome Web Store API access successful"
              echo "  Extension details retrieved successfully"
            fi

          else
            echo "‚ùå OAuth2 credentials are invalid"
            echo "   Please check your credentials in Google Cloud Console"
            echo "   Response: $RESPONSE"
            echo ""
            echo "üîç Common OAuth2 Issues:"
            echo "  1. Invalid client_id or client_secret"
            echo "  2. Expired or invalid refresh_token"
            echo "  3. OAuth2 client not properly configured"
            echo "  4. Missing required scopes"
            echo ""
            echo "üîß Troubleshooting:"
            echo "   1. Regenerate OAuth2 credentials in Google Cloud Console"
            echo "   2. Ensure refresh token is valid and not expired"
            echo "   3. Verify OAuth2 client has correct scopes"
            echo "   4. Check that OAuth2 client is configured for web application"
            exit 1
          fi

      - name: Upload to Chrome Web Store
        run: |
          echo "üì§ Uploading to Chrome Web Store..."
          echo "Extension ID: ${{ secrets.CHROME_EXTENSION_ID }}"
          echo "Source file: tag-extension-manager-${{ env.VERSION }}.zip"

          # Set environment variables for debugging
          CLIENT_ID="${{ secrets.CHROME_CLIENT_ID }}"
          CLIENT_SECRET="${{ secrets.CHROME_CLIENT_SECRET }}"
          REFRESH_TOKEN="${{ secrets.CHROME_REFRESH_TOKEN }}"
          EXTENSION_ID="${{ secrets.CHROME_EXTENSION_ID }}"

          # Enhanced debugging and error handling
          echo "üîç Debug Information:"
          echo "  - Client ID length: ${#CLIENT_ID}"
          echo "  - Client Secret length: ${#CLIENT_SECRET}"
          echo "  - Refresh Token length: ${#REFRESH_TOKEN}"
          echo "  - Extension ID: $EXTENSION_ID"
          echo "  - File size: $(ls -lh tag-extension-manager-${{ env.VERSION }}.zip | awk '{print $5}')"

          # Test OAuth2 token before upload
          echo "üîê Testing OAuth2 token..."
          TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$CLIENT_ID" \
            -d "client_secret=$CLIENT_SECRET" \
            -d "refresh_token=$REFRESH_TOKEN" \
            -d "grant_type=refresh_token" \
            "https://oauth2.googleapis.com/token")

          if echo "$TOKEN_RESPONSE" | grep -q "access_token"; then
            echo "‚úÖ OAuth2 token obtained successfully"
            ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token // empty')
            echo "  - Token length: ${#ACCESS_TOKEN}"
            
            # Validate that access token was extracted successfully
            if [ -z "$ACCESS_TOKEN" ]; then
              echo "‚ùå Failed to extract access token from response"
              echo "  Response: $TOKEN_RESPONSE"
              exit 1
            fi
          else
            echo "‚ùå Failed to obtain OAuth2 token"
            echo "  Response: $TOKEN_RESPONSE"
            exit 1
          fi

          # Test Chrome Web Store API access
          echo "üß™ Testing Chrome Web Store API access..."
          API_RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://www.googleapis.com/chromewebstore/v1.1/items/$EXTENSION_ID?projection=DRAFT")

          if echo "$API_RESPONSE" | grep -q "error"; then
            echo "‚ùå Chrome Web Store API access failed"
            echo "  Response: $API_RESPONSE"
            echo ""
            echo "üîç This indicates one of the following issues:"
            echo "  1. Extension ID mismatch"
            echo "  2. Chrome Web Store API not enabled"
            echo "  3. Insufficient OAuth2 scopes"
            echo "  4. Account permissions issue"
            echo "  5. Missing required API parameters (projection)"
            echo ""
            echo "üìã Required OAuth2 Scopes:"
            echo "   - https://www.googleapis.com/auth/chromewebstore"
            echo ""
            echo "üîß Next Steps:"
            echo "   1. Verify extension ID in Chrome Web Store Developer Console"
            echo "   2. Enable Chrome Web Store API in Google Cloud Console"
            echo "   3. Check OAuth2 client scopes"
            echo "   4. Verify developer account permissions"
            echo "   5. Ensure API request includes required parameters"
            exit 1
          else
            echo "‚úÖ Chrome Web Store API access successful"
          fi

          # Upload with enhanced error handling
          echo "üì§ Starting upload..."
          UPLOAD_OUTPUT=$(npx chrome-webstore-upload-cli@2 upload --auto-publish --source tag-extension-manager-${{ env.VERSION }}.zip 2>&1)
          UPLOAD_EXIT_CODE=$?

          echo "Upload Output:"
          echo "$UPLOAD_OUTPUT"

          if [ $UPLOAD_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Upload completed successfully"
          else
            echo "‚ùå Upload failed with exit code: $UPLOAD_EXIT_CODE"

            # Analyze error response
            if echo "$UPLOAD_OUTPUT" | grep -q "403"; then
              echo ""
              echo "üîç 403 Forbidden Error Analysis:"
              echo "   This error typically indicates:"
              echo "   1. OAuth2 scope insufficient"
              echo "   2. Extension ID mismatch"
              echo "   3. Account permissions issue"
              echo "   4. Chrome Web Store API not enabled"
              echo ""
              echo "üìã Required OAuth2 Scopes:"
              echo "   - https://www.googleapis.com/auth/chromewebstore"
              echo ""
              echo "üîß Troubleshooting Steps:"
              echo "   1. Verify OAuth2 client has correct scopes"
              echo "   2. Enable Chrome Web Store API in Google Cloud Console"
              echo "   3. Check extension ID matches Chrome Web Store"
              echo "   4. Verify developer account permissions"
            fi

            exit $UPLOAD_EXIT_CODE
          fi
        env:
          CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
          EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        continue-on-error: true

      - name: Check Chrome Web Store upload result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Chrome Web Store upload completed successfully"
          else
            echo "‚ö†Ô∏è Chrome Web Store upload failed, but workflow continued"
            echo ""
            echo "üîç Detailed Troubleshooting Guide:"
            echo ""
            echo "1. OAuth2 Configuration Issues:"
            echo "   - Go to https://console.cloud.google.com/"
            echo "   - Navigate to APIs & Services > Credentials"
            echo "   - Verify OAuth2 client is configured as 'Web application'"
            echo "   - Check that authorized redirect URIs include:"
            echo "     * http://localhost:8080"
            echo "     * https://your-domain.com (if applicable)"
            echo ""
            echo "2. OAuth2 Scopes Configuration:"
            echo "   - Ensure your OAuth2 client has the following scopes:"
            echo "     * https://www.googleapis.com/auth/chromewebstore"
            echo "   - Add scopes in Google Cloud Console > APIs & Services > OAuth consent screen"
            echo ""
            echo "3. Chrome Web Store API Enablement:"
            echo "   - Go to https://console.cloud.google.com/"
            echo "   - Navigate to APIs & Services > Library"
            echo "   - Search for 'Chrome Web Store API'"
            echo "   - Click 'Enable' if not already enabled"
            echo ""
            echo "4. Extension ID Verification:"
            echo "   - Current ID: ${{ secrets.CHROME_EXTENSION_ID }}"
            echo "   - Go to https://chrome.google.com/webstore/devconsole/"
            echo "   - Verify this ID matches your extension"
            echo "   - Extension ID is found in the URL when editing your extension"
            echo ""
            echo "5. Chrome Web Store Developer Account:"
            echo "   - Go to https://chrome.google.com/webstore/devconsole/"
            echo "   - Ensure account is properly set up and verified"
            echo "   - Check that you have publishing permissions"
            echo "   - Verify account is not suspended or restricted"
            echo ""
            echo "6. Refresh Token Issues:"
            echo "   - Refresh tokens can expire or become invalid"
            echo "   - Generate a new refresh token using OAuth2 flow:"
            echo "     * Use Google OAuth2 Playground: https://developers.google.com/oauthplayground/"
            echo "     * Set up OAuth2 client credentials"
            echo "     * Select Chrome Web Store API v1.1"
            echo "     * Exchange authorization code for refresh token"
            echo ""
            echo "7. Common 403 Forbidden Causes:"
            echo "   - Extension ID mismatch between manifest and Chrome Web Store"
            echo "   - OAuth2 client not configured for web application"
            echo "   - Missing or incorrect OAuth2 scopes"
            echo "   - Chrome Web Store API not enabled"
            echo "   - Account permissions insufficient"
            echo "   - Extension not published or draft status"
            echo ""
            echo "8. Debugging Steps:"
            echo "   - Check the detailed error messages above"
            echo "   - Verify all environment variables are set correctly"
            echo "   - Test OAuth2 flow manually using curl commands"
            echo "   - Check Google Cloud Console logs for API errors"
            echo ""
            echo "9. Alternative Upload Methods:"
            echo "   - Use Chrome Web Store Developer Console for manual upload"
            echo "   - Consider using different upload tools:"
            echo "     * chrome-webstore-upload (npm package)"
            echo "     * cws-publish (GitHub Action)"
            echo ""
            echo "10. Support Resources:"
            echo "    - Chrome Web Store API Documentation:"
            echo "      https://developer.chrome.com/docs/webstore/api/"
            echo "    - Google Cloud Console Help:"
            echo "      https://cloud.google.com/apis/docs/getting-started"
            echo "    - OAuth2 Documentation:"
            echo "      https://developers.google.com/identity/protocols/oauth2"
          fi
