(()=>{"use strict";class e{async getAllExtensions(){return new Promise((e=>{chrome.management.getAll((t=>{const n=t.map((e=>({id:e.id,name:e.name,description:e.description||"",enabled:e.enabled,iconUrl:e.icons?.[0]?.url||""})));n.sort(((e,t)=>e.name.localeCompare(t.name))),e(n)}))}))}async toggleExtension(e,t){return new Promise(((n,s)=>{chrome.management.setEnabled(e,t,(()=>{chrome.runtime.lastError?s(chrome.runtime.lastError):n()}))}))}filterExtensions(e,t){const n=e.toLowerCase();return t.filter((e=>e.name.toLowerCase().includes(n)||e.description.toLowerCase().includes(n)))}}class t{constructor(){this.onToggleCallback=null,this.container=document.getElementById("extensionsList"),this.container?console.debug("[Extension Manager] Container element found:",this.container):console.error("[Extension Manager] Container element #extensionsList not found")}render(e){this.container?(this.container.innerHTML="",e.forEach((e=>{const t=this.createExtensionElement(e);this.container.appendChild(t)}))):console.error("[Extension Manager] Cannot render: container element not found")}createExtensionElement(e){const t=document.createElement("div");t.className="extension-item";const n=document.createElement("img");n.className="extension-icon",n.src=e.iconUrl,n.alt=e.name;const s=document.createElement("div");s.className="extension-info";const i=document.createElement("h3");i.className="extension-name",i.textContent=e.name;const o=document.createElement("div");o.className="extension-controls";const a=document.createElement("label");a.className="switch";const r=document.createElement("input");r.type="checkbox",r.checked=e.enabled,r.addEventListener("change",(()=>{this.onToggleCallback&&this.onToggleCallback(e.id,r.checked)}));const c=document.createElement("span");c.className="switch-track";const l=document.createElement("span");l.className="switch-thumb",a.appendChild(r),a.appendChild(c),a.appendChild(l);const h=document.createElement("span");return h.className="settings-icon",h.textContent="more_vert",h.title="Extension Settings",h.addEventListener("click",(()=>{const t=navigator.userAgent.toLowerCase();let n="chrome://extensions";t.includes("brave")?n="brave://extensions":t.includes("edg")?n="edge://extensions":t.includes("opera")?n="opera://extensions":t.includes("vivaldi")&&(n="vivaldi://extensions"),chrome.tabs.create({url:`${n}/?id=${e.id}`})})),o.appendChild(a),o.appendChild(h),s.appendChild(i),t.appendChild(n),t.appendChild(s),t.appendChild(o),t}onToggleExtension(e){this.onToggleCallback=e}}class n{constructor(){this.onSearchCallback=null,this.input=document.getElementById("search"),this.setupEventListeners()}setupEventListeners(){this.input.addEventListener("input",(()=>{this.onSearchCallback&&this.onSearchCallback(this.input.value)}))}onSearch(e){this.onSearchCallback=e}}class s{constructor(){this.button=document.createElement("button"),this.button.className="theme-toggle",this.isDarkMode=this.getInitialThemeState(),this.initialize()}getInitialThemeState(){const e=localStorage.getItem("theme");return e?"dark"===e:window.matchMedia("(prefers-color-scheme: dark)").matches}initialize(){this.button.innerHTML=this.isDarkMode?'<span class="material-icons-outlined">dark_mode</span>':'<span class="material-icons-outlined">light_mode</span>',this.button.title=this.isDarkMode?"Switch to Light Mode":"Switch to Dark Mode",this.button.addEventListener("click",(()=>this.toggleTheme())),this.applyTheme()}toggleTheme(){this.isDarkMode=!this.isDarkMode,this.button.innerHTML=this.isDarkMode?'<span class="material-icons-outlined">dark_mode</span>':'<span class="material-icons-outlined">light_mode</span>',this.button.title=this.isDarkMode?"Switch to Light Mode":"Switch to Dark Mode",this.applyTheme(),localStorage.setItem("theme",this.isDarkMode?"dark":"light")}applyTheme(){document.documentElement.setAttribute("data-theme",this.isDarkMode?"dark":"light")}render(e){e.appendChild(this.button)}}class i{constructor(){this.extensions=[],this.extensionManager=new e,this.extensionList=new t,this.searchBar=new n,this.themeToggle=new s,this.initialize()}async initialize(){try{console.debug("[Extension Manager] Fetching extensions..."),this.extensions=await this.extensionManager.getAllExtensions(),console.debug("[Extension Manager] Fetched extensions:",this.extensions),0===this.extensions.length&&console.warn("[Extension Manager] No extensions found"),this.extensionList.render(this.extensions),this.setupEventListeners(),this.setupThemeToggle()}catch(e){console.error("[Extension Manager] Error initializing popup:",e)}}setupEventListeners(){this.searchBar.onSearch((e=>{const t=this.extensionManager.filterExtensions(e,this.extensions);this.extensionList.render(t)})),this.extensionList.onToggleExtension((async(e,t)=>{try{await this.extensionManager.toggleExtension(e,t),this.extensions=await this.extensionManager.getAllExtensions(),this.extensionList.render(this.extensions)}catch(e){console.error("[Extension Manager] Error toggling extension:",e)}}))}setupThemeToggle(){const e=document.querySelector("header");e&&this.themeToggle.render(e)}}document.addEventListener("DOMContentLoaded",(()=>{new i}))})();